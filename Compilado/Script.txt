
GO

/****** Object:  Table [dbo].[Mercadoria_Estoque_Dia]    Script Date: 17/07/2025 13:39:46 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[Mercadoria_Estoque_Dia](
	[Filial] [varchar](20) NOT NULL,
	[Data] [datetime] NOT NULL,
	[PLU] [varchar](20) NOT NULL,
	[Saldo] [decimal](15, 3) NULL,
	[Qtde_Inicial] [decimal](14, 3) NULL,
	[Entrada_NFe] [decimal](14, 3) NULL,
	[Entrada_Outras] [decimal](14, 3) NULL,
	[Saida_NFe] [decimal](14, 3) NULL,
	[Saida_Outras] [decimal](14, 3) NULL,
	[Saida_Cupom] [decimal](14, 3) NULL,
 CONSTRAINT [PK_Mercadoria_Estoque_Dia] PRIMARY KEY CLUSTERED 
(
	[Filial] ASC,
	[Data] ASC,
	[PLU] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

ALTER TABLE [dbo].[Mercadoria_Estoque_Dia] ADD  DEFAULT ((0)) FOR [Saldo]
GO

ALTER TABLE [dbo].[Mercadoria_Estoque_Dia] ADD  DEFAULT ((0)) FOR [Qtde_Inicial]
GO

ALTER TABLE [dbo].[Mercadoria_Estoque_Dia] ADD  DEFAULT ((0)) FOR [Entrada_NFe]
GO

ALTER TABLE [dbo].[Mercadoria_Estoque_Dia] ADD  DEFAULT ((0)) FOR [Entrada_Outras]
GO

ALTER TABLE [dbo].[Mercadoria_Estoque_Dia] ADD  DEFAULT ((0)) FOR [Saida_NFe]
GO

ALTER TABLE [dbo].[Mercadoria_Estoque_Dia] ADD  DEFAULT ((0)) FOR [Saida_Outras]
GO

ALTER TABLE [dbo].[Mercadoria_Estoque_Dia] ADD  DEFAULT ((0)) FOR [Saida_Cupom]
GO



GO

/****** Object:  StoredProcedure [dbo].[sp_Atualizar_Saldo_Dia]    Script Date: 30/07/2025 16:54:54 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE PROCEDURE [dbo].[sp_Atualizar_Saldo_Dia]
    @Filial VARCHAR(20),
    @Data DATE,
    @PLU VARCHAR(20),
    @TipoMovimentacao VARCHAR(2), -- Ex: 'Entrada_NFe', 'Saida_Cupom'
    @Quantidade DECIMAL(18, 4)
AS
BEGIN
    SET NOCOUNT ON;


	--sp_Atualizar_Saldo_Dia 'MATRIZ', '2025-07-14', '6832', 'EN', 12
	DECLARE @ColunaMovimentacao VARCHAR(20);
    DECLARE @ExisteRegistro INT;
    DECLARE @DataAnterior DATE = DATEADD(DAY, -1, @Data);
    DECLARE @QtdeInicialAnterior DECIMAL(18,4) = 0;

	SET @ColunaMovimentacao = CASE 
		WHEN @TipoMovimentacao = 'EN' THEN 'Entrada_NFe'
		WHEN @TipoMovimentacao = 'EO' THEN 'Entrada_Outras'
		WHEN @TipoMovimentacao = 'SN' THEN 'Saida_NFe'
		WHEN @TipoMovimentacao = 'SO' THEN 'Saida_Outras'
		WHEN @TipoMovimentacao = 'SC' THEN 'Saida_Cupom'
		END



    -- Verifica se já existe o registro
    SELECT @ExisteRegistro = COUNT(*)
    FROM Mercadoria_Estoque_Dia WITH (INDEX=PK_Mercadoria_Estoque_Dia, NOLOCK)
    WHERE Filial = @Filial AND Data = @Data AND PLU = @PLU;

    -- Se não existir, insere com base no dia anterior
    IF @ExisteRegistro = 0
    BEGIN
        SELECT TOP 1 @QtdeInicialAnterior = ISNULL(Mercadoria_Estoque_Dia.Saldo, 0)
        FROM Mercadoria_Estoque_Dia WITH (INDEX=PK_Mercadoria_Estoque_Dia, NOLOCK)
        WHERE Filial = @Filial AND Data <= @DataAnterior AND PLU = @PLU
        ORDER BY Data DESC;

        INSERT INTO Mercadoria_Estoque_Dia (
            Filial, Data, PLU, Qtde_Inicial,
            Entrada_NFe, Entrada_Outras,
            Saida_NFe, Saida_Outras, Saida_Cupom, Saldo
        )
        VALUES (
            @Filial, @Data, @PLU, @QtdeInicialAnterior,
            0, 0, 0, 0, 0, @QtdeInicialAnterior
        );
    END

    -- Atualiza o tipo de movimentação
    DECLARE @Sql NVARCHAR(MAX) = N'';
    SET @Sql = '
        UPDATE Mercadoria_Estoque_Dia
        SET ' + QUOTENAME(@ColunaMovimentacao) + ' = ISNULL(' + QUOTENAME(@ColunaMovimentacao) + ', 0) + @Quantidade
        WHERE Filial = @Filial AND Data = @Data AND PLU = @PLU;
    ';

    EXEC sp_executesql @Sql,
        N'@Filial VARCHAR(20), @Data DATE, @PLU VARCHAR(20), @Quantidade DECIMAL(18,4)',
        @Filial, @Data, @PLU, @Quantidade;

    -- Recalcula o saldo
    UPDATE Mercadoria_Estoque_Dia
    SET Saldo = Qtde_Inicial 
                + ISNULL(Entrada_NFe, 0)
                + ISNULL(Entrada_Outras, 0)
                - ISNULL(Saida_NFe, 0)
                - ISNULL(Saida_Outras, 0)
                - ISNULL(Saida_Cupom, 0)
    WHERE Filial = @Filial AND Data = @Data AND PLU = @PLU;

	UPDATE Mercadoria_Loja SET Mercadoria_Loja.Saldo_Atual = ISNULL((SELECT TOP 1 Mercadoria_Estoque_Dia.Saldo
	FROM Mercadoria_Estoque_Dia WHERE Mercadoria_Estoque_Dia.Filial = Mercadoria_loja.Filial 
	and Mercadoria_Loja.PLU = Mercadoria_Estoque_Dia.PLU
	AND Mercadoria_Estoque_Dia.Data = @Data), 0)
	WHERE Mercadoria_Loja.Filial = @Filial AND Mercadoria_Loja.PLU = @PLU ;

	UPDATE Mercadoria SET Mercadoria.saldo_atual = ISNULL((SELECT SUM(Mercadoria_Loja.Saldo_Atual) 
	FROM Mercadoria_Loja WHERE Mercadoria_Loja.PLU = Mercadoria.PLU), 0)
	WHERE Mercadoria.PLU = @PLU ;


END
GO





go

/****** Object:  Table [dbo].[NF_CTe]    Script Date: 30/06/2025 09:21:05 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE TABLE [dbo].[NF_CTe](
	[Filial] [varchar](20) NOT NULL,
	[Chave_NFe] [varchar](47) NOT NULL,
	[Situacao] [varchar](2) NOT NULL,
	[Fornecedor] [varchar](100) NOT NULL,
	[Numero_Documento] [varchar](20) NOT NULL,
	[Serie] [varchar](3) NOT NULL,
	[Emissao] [datetime] NOT NULL,
	[Aquisicao] [datetime] NOT NULL,
	[Chave] [varchar](47) NOT NULL,
	[Tipo_CTe] [tinyint] NOT NULL,
	[Chave_Substituicao] [varchar](47) NOT NULL,
	[Tipo_Frete] [tinyint] NOT NULL,
	[ICMS_Base] [decimal](12, 2) NOT NULL,
	[ICMS_Reducao] [decimal](5, 2) NOT NULL,
	[ICMS_Aliquota] [decimal](12, 2) NOT NULL,
	[ICMS_Valor] [decimal](12, 2) NOT NULL,
	[Valor_Documento] [decimal](12, 2) NOT NULL,
	[Valor_Desconto] [decimal](12, 2) NOT NULL,
	[IBGE_Origem] [int] NOT NULL,
	[IBGE_Destino] [int] NOT NULL,
	[Boleto_Vencimento] [datetime] NOT NULL,
 CONSTRAINT [PK_NF_CTe] PRIMARY KEY CLUSTERED 
(
	[Fornecedor] ASC,
	[Numero_Documento] ASC,
	[Serie] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
) ON [PRIMARY]
GO

GO

/****** Object:  StoredProcedure [dbo].[sp_Br_Cons_SaldoKardexPLU]    Script Date: 17/07/2025 13:41:10 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

ALTER PROCEDURE [dbo].[sp_Br_Cons_SaldoKardexPLU]
@PLU as Varchar(17)
AS

-- sp_br_cons_saldokardexplu  '6862'
begin
	--declare @plu as varchar(17)
	declare @qtdeEntrada as integer
	declare @qtdeSaidanf As integer
	declare @qtdeSaida As integer
	declare @qtdeAjEntrada as Integer
	declare @qtdeAjSaida as Integer
	declare @dataBase	as datetime
	declare @qtdeBase as integer
	declare @qtdeRelacionado as integer

	--set @plu = '59382'

	SET @dataBase = ISNULL((select TOP 1 case WHEN iv.DataHora_Encerramento > IV.Data THEN IV.DataHora_Encerramento 
	ELSE IV.DATA END  from 
	Inventario iv INNER JOIN Inventario_itens ii on iv.Codigo_inventario = ii.Codigo_inventario 
	INNER JOIN Tipo_movimentacao tm ON tm.Movimentacao = iv.tipoMovimentacao and tm.Saida = 2 
	WHERE ii.PLU = @plu and iv.status = 'ENCERRADO' order by iv.Data desc), '1900-01-01')

	if @dataBase > '1900-01-01' 
		begin
			SET @qtdeBase = ISNULL((select top 1 ii.Contada from 
			Inventario iv inner join Inventario_itens ii on iv.Codigo_inventario = ii.Codigo_inventario
			INNER JOIN Tipo_movimentacao tm ON tm.Movimentacao = iv.tipoMovimentacao and tm.Saida = 2 
			WHERE ii.PLU = @plu  and iv.status = 'ENCERRADO' order by convert(int, iv.Codigo_inventario)  desc), 
			'1900-01-01')
		end
	else
		set @qtdeBase = 0


	set @qtdeAjEntrada = isnull(( select sum(ii.Contada) from Inventario iv inner join Inventario_itens ii 
	on iv.Codigo_inventario = ii.Codigo_inventario AND iv.tipoMovimentacao in('AJUSTE ENTRADA', 'DEVOLUCAO')
	and iv.status = 'ENCERRADO' WHERE iv.DataHora_Encerramento  >= @database and ii.PLU = @plu), 0)

	set @qtdeAjSaida  = isnull(( select sum(ii.Contada) from Inventario iv inner join Inventario_itens ii 
	on iv.Codigo_inventario = ii.Codigo_inventario AND iv.tipoMovimentacao in('AJUSTE SAIDA', 'DESPERDICIO')
	and iv.status = 'ENCERRADO' WHERE iv.DataHora_Encerramento  >= @dataBase and ii.PLU = @plu), 0)
		

	select @qtdeEntrada = sum(i.Qtde * i.Embalagem) 
	from nf inner join nf_item i on nf.Filial = i.Filial and nf.Cliente_Fornecedor = i.Cliente_Fornecedor and nf.codigo = i.codigo  and nf.tipo_nf = i.Tipo_NF and nf.serie = i.serie 
	inner join Natureza_Operacao n on nf.codigo_operacao = n.Codigo_operacao 
	where nf.Tipo_NF = 2
	and i.PLU = @plu
	and CASE WHEN ISNULL(NF.DataHora_Lancamento, '1900-01-01') > NF.DATA THEN nf.DataHora_Lancamento ELSE NF.DATA END   >= case when @dataBase >= '1900-01-01' then @dataBase else '1900-01-01' end
	and ISNULL(nf.nf_canc, 0) < 1
	and n.Baixa_estoque  = 1

		
	select @qtdeSaidanf  = sum(i.Qtde * i.Embalagem) 
	from nf inner join nf_item i on nf.Filial = i.Filial and nf.Cliente_Fornecedor = i.Cliente_Fornecedor and nf.codigo = i.codigo and nf.tipo_nf = i.Tipo_NF and nf.serie = i.serie 
	inner join Natureza_Operacao n on nf.codigo_operacao = n.Codigo_operacao 
	where nf.Tipo_NF = 1
	and i.PLU = @plu
	and CASE WHEN ISNULL(NF.DataHora_Lancamento, '1900-01-01') > NF.DATA THEN nf.DataHora_Lancamento ELSE NF.DATA END  >= case when @dataBase >= '1900-01-01' then @dataBase else '1900-01-01' end
	and ISNULL(nf.nf_canc, 0) < 1
	and n.Baixa_estoque  = 1

	select @qtdeSaida = sum(s.qtde) from Saida_estoque s with (index=ix_Saida_estoque)
	where s.Filial = 'MATRIZ' AND ( s.Data_movimento + CONVERT(DATETIME, S.Hora_venda)) >= case when @dataBase >= '1900-01-01' then @dataBase else '1900-01-01' end
	and s.PLU = @plu and s.data_cancelamento is null


	SELECT @qtdeRelacionado = SUM(A.Qtde * M.fator_Estoque_Vinculado)
	FROM (SELECT S.PLU, S.QTDE 
	from Saida_estoque s with (index=ix_Saida_estoque)
	where s.Filial = 'MATRIZ' AND 
	 ( s.Data_movimento + CONVERT(DATETIME, S.Hora_venda)) >= case when @dataBase >= '1900-01-01' then @dataBase else '1900-01-01' end
	and s.data_cancelamento is null
	AND s.plu IN(SELECT Mercadoria.PLU FROM Mercadoria WHERE Mercadoria.PLU_Vinculado = @PLU)) AS A
	INNER JOIN Mercadoria M ON A.PLU = M.PLU

	/*
	print @database
	print @plu
	print @qtdebase 
	print @qtdeentrada 
	PRINT @qtdeajentrada
	print @qtdesaidanf
	print @qtdesaida
	print @qtdeAjSaida
	PRINT @qtdeRelacionado

	PRINT '----'
	*/
	SELECT
	Inicio = CONVERT(VARCHAR, @dataBase, 120) 
	, [Qtde Inicio] =  ISNULL(@qtdeBase, 0)
	, [Entrada NFe] = ISNULL(@qtdeentrada, 0) 
	, [Entrada Ajustes] = ISNULL(@qtdeajentrada, 0) 
	, [Saida NFe] = ISNULL(@qtdesaidanf, 0) 
	, [Saida Cupom] = ISNULL(@qtdesaida, 0) + ISNULL(@qtdeRelacionado, 0) 
	, [Saida Ajustes] = ISNULL(@qtdeAjSaida, 0)
	, [Saldo Final] = ISNULL(@qtdeBase, 0) + ISNULL(@qtdeentrada, 0)  + ISNULL(@qtdeajentrada, 0)  - ISNULL(@qtdesaidanf, 0)  - ISNULL(@qtdesaida, 0)  - ISNULL(@qtdeAjSaida, 0) - ISNULL(@qtdeRelacionado, 0) 

end
GO

GO

/****** Object:  UserDefinedFunction [dbo].[F_SaldoKardexPLU]    Script Date: 17/07/2025 13:42:27 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



ALTER FUNCTION [dbo].[F_SaldoKardexPLU](@PLU as Varchar(17))
Returns int as
begin
	--declare @plu as varchar(17)
	declare @qtdeEntrada as integer
	declare @qtdeSaidanf As integer
	declare @qtdeSaida As integer
	declare @qtdeAjEntrada as Integer
	declare @qtdeAjSaida as Integer
	declare @dataBase	as datetime
	declare @qtdeBase as integer
	declare @qtdeRelacionado as integer
	--set @plu = '6862'


	SET @dataBase = ISNULL((select TOP 1 case WHEN iv.DataHora_Encerramento > IV.Data THEN IV.DataHora_Encerramento 
	ELSE IV.DATA END  from Inventario iv 
	inner join Inventario_itens ii on iv.Codigo_inventario = ii.Codigo_inventario 
	INNER JOIN Tipo_movimentacao tm ON tm.Movimentacao = iv.tipoMovimentacao and tm.Saida = 2 
	WHERE ii.PLU = @plu and iv.status = 'ENCERRADO' order by iv.Data desc), '1900-01-01')

	if @dataBase > '1900-01-01' 
		begin
			SET @qtdeBase = ISNULL((select top 1 ii.Contada from Inventario iv 
			inner join Inventario_itens ii on iv.Codigo_inventario = ii.Codigo_inventario
			INNER JOIN Tipo_movimentacao tm ON tm.Movimentacao = iv.tipoMovimentacao and tm.Saida = 2 
			WHERE ii.PLU = @plu and iv.status = 'ENCERRADO' order by iv.Codigo_inventario  desc), '1900-01-01')
		end
	else
		set @qtdeBase = 0


	set @qtdeAjEntrada = isnull(( select sum(ii.Contada) from Inventario iv inner join Inventario_itens ii 
	on iv.Codigo_inventario = ii.Codigo_inventario AND iv.tipoMovimentacao in('AJUSTE ENTRADA', 'DEVOLUCAO')
	and iv.status = 'ENCERRADO' WHERE iv.data >= @database and ii.PLU = @plu), 0)

	set @qtdeAjSaida  = isnull(( select sum(ii.Contada) from Inventario iv inner join Inventario_itens ii 
	on iv.Codigo_inventario = ii.Codigo_inventario AND iv.tipoMovimentacao in('AJUSTE SAIDA', 'DESPERDICIO')
	and iv.status = 'ENCERRADO' WHERE iv.Data >= @dataBase and ii.PLU = @plu), 0)
		

	select @qtdeEntrada = sum(i.Qtde * i.Embalagem) 
	from nf inner join nf_item i on nf.Filial = i.Filial and nf.Cliente_Fornecedor = i.Cliente_Fornecedor and nf.codigo = i.codigo
	inner join Natureza_Operacao n on nf.codigo_operacao = n.Codigo_operacao 
	where nf.Tipo_NF = 2
	and i.PLU = @plu
	and nf.data >= case when @dataBase >= '1900-01-01' then @dataBase else '1900-01-01' end
	and ISNULL(nf.nf_canc, 0) < 1
	and n.Baixa_estoque  = 1

		
	select @qtdeSaidanf  = sum(i.Qtde * i.Embalagem) 
	from nf inner join nf_item i on nf.Filial = i.Filial and nf.Cliente_Fornecedor = i.Cliente_Fornecedor and nf.codigo = i.codigo
	inner join Natureza_Operacao n on nf.codigo_operacao = n.Codigo_operacao 
	where nf.Tipo_NF = 1
	and i.PLU = @plu
	and nf.data >= case when @dataBase >= '1900-01-01' then @dataBase else '1900-01-01' end
	and ISNULL(nf.nf_canc, 0) < 1
	and n.Baixa_estoque  = 1

	select @qtdeSaida = sum(s.qtde) from Saida_estoque s with (index=ix_Saida_estoque)
	where s.Filial = 'MATRIZ' AND (s.Data_movimento + CONVERT(DATETIME, S.HORA_VENDA))  >= case when @dataBase >= '1900-01-01' then @dataBase else '1900-01-01' end
	and s.PLU = @plu and s.data_cancelamento is null

	SELECT @qtdeRelacionado = SUM(A.Qtde * M.fator_Estoque_Vinculado)
	FROM (SELECT S.PLU, S.QTDE 
	from Saida_estoque s with (index=ix_Saida_estoque)
	where s.Filial = 'MATRIZ' AND (s.Data_movimento + CONVERT(DATETIME, S.HORA_VENDA))   >= case when @dataBase >= '1900-01-01' then @dataBase else '1900-01-01' end
	and s.data_cancelamento is null
	AND s.plu IN(SELECT Mercadoria.PLU FROM Mercadoria WHERE Mercadoria.PLU_Vinculado = @PLU)) AS A
	INNER JOIN Mercadoria M ON A.PLU = M.PLU

	/*
	print @database
	print @plu
	print @qtdebase 
	print @qtdeentrada 
	PRINT @qtdeajentrada
	print @qtdesaidanf
	print @qtdesaida
	print @qtdeAjSaida
	PRINT @qtdeRelacionado

	PRINT '----'
	*/
	return ISNULL(@qtdeBase, 0) 
	+ ISNULL(@qtdeentrada, 0) 
	+ ISNULL(@qtdeajentrada, 0) 
	- ISNULL(@qtdesaidanf, 0) 
	- ISNULL(@qtdesaida, 0) 
	- ISNULL(@qtdeAjSaida, 0)
	- ISNULL(@qtdeRelacionado, 0)

end
GO

CREATE TABLE Mercadoria_Movimentacao_Relacionada 
(Filial VARCHAR(20) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL ,
PLU VARCHAR(17) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
Data DATETIME,
Qtde DECIMAL(12,3),
PLU_Origem VARCHAR(17) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
Origem VARCHAR(250)
)
GO
CREATE INDEX IX_Filial_PLU ON Mercadoria_Movimentacao_Relacionada (Filial, PLU);

GO
CREATE PROCEDURE sp_ins_Mercadoria_Movimentacao_Relacionada
	@FILIAL VARCHAR(20),
	@PLU VARCHAR(17),
	@DATA DATETIME,
	@QTDE DECIMAL(12,3),
	@PLU_ORIGEM VARCHAR(17),
	@ORIGEM VARCHAR(250)
AS
BEGIN
INSERT INTO Mercadoria_Movimentacao_Relacionada (Filial, PLU, Data, Qtde, PLU_Origem, Origem) VALUES (@FILIAL, @PLU, @DATA, @QTDE, @PLU_ORIGEM, @ORIGEM)
END

GO

/****** Object:  StoredProcedure [dbo].[sp_br_RecalculoSaldoDia]    Script Date: 06/08/2025 15:19:55 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE PROCEDURE [dbo].[sp_br_RecalculoSaldoDia]
@FILIAL VARCHAR(20),
@PLU VARCHAR(17),
@DATAINICIO DATE
AS

DECLARE @DATAATUAL DATE = CAST(GETDATE() AS DATE);
DECLARE @DATACORRENTE DATE;
DECLARE @NSALDO DECIMAL(12,3) = 0;
DECLARE @SALDOINICIO DECIMAL(12,3) = 0;
DECLARE @ENTNFE DECIMAL(12,3) = 0;
DECLARE @ENTOUTRAS DECIMAL(12,3) = 0;
DECLARE @SAINFE DECIMAL(12,3) = 0;
DECLARE @SAIOUTRAS DECIMAL(12,3) = 0;
DECLARE @SAICUPOM DECIMAL(12,3) = 0;

SET @DATACORRENTE = @DATAINICIO

--sp_br_recalculoSaldoDia 'matriz', '27685', '2025-08-04'
--select * from mercadoria_estoque_dia where plu = '27685'

--** Pega o primeiro registro anterior ou igual a data enviada.
SELECT TOP 1 @NSALDO = ISNULL(Mercadoria_Estoque_Dia.Saldo, 0) FROM Mercadoria_Estoque_Dia 
	WHERE Mercadoria_Estoque_Dia.Filial = @FILIAL AND Mercadoria_Estoque_Dia.Data < @DATAINICIO 
	AND Mercadoria_Estoque_Dia.PLU = @PLU ORDER BY Mercadoria_Estoque_Dia.Data DESC;
PRINT 'Saldo inial ' + CONVERT(VARCHAR, @NSALDO);
WHILE @DATACORRENTE <= @DATAATUAL 
	BEGIN
		DECLARE ID_CURSOR_MD CURSOR FOR SELECT Entrada_NFe, Entrada_Outras, Saida_NFe, Saida_Outras, Saida_Cupom 
								FROM Mercadoria_Estoque_Dia WHERE Filial = @FILIAL AND Mercadoria_Estoque_Dia.Data = @DATACORRENTE AND PLU = @PLU;
		OPEN ID_CURSOR_MD;
		FETCH NEXT FROM ID_CURSOR_MD INTO @ENTNFE, @ENTOUTRAS, @SAINFE, @SAIOUTRAS, @SAICUPOM;
		WHILE @@FETCH_STATUS = 0
			BEGIN
				UPDATE MERCADORIA_ESTOQUE_DIA 
					SET Mercadoria_Estoque_dia.Saldo = @NSALDO + @ENTNFE + @ENTOUTRAS - @SAINFE - @SAIOUTRAS - @SAICUPOM,
					Mercadoria_Estoque_dia.Qtde_Inicial = @NSALDO
				WHERE Mercadoria_Estoque_dia.Filial = @FILIAL
				AND Mercadoria_Estoque_Dia.Data = @DATACORRENTE
				AND Mercadoria_Estoque_Dia.PLU = @PLU;

				--** Grava o SALDO INICIAL PARA O DIA SEGUINTE
				SET @NSALDO = (@NSALDO + @ENTNFE + @ENTOUTRAS - @SAINFE - @SAIOUTRAS - @SAICUPOM);

				FETCH NEXT FROM ID_CURSOR_MD INTO @ENTNFE, @ENTOUTRAS, @SAINFE, @SAIOUTRAS, @SAICUPOM;;
			END
		CLOSE ID_CURSOR_MD;
		DEALLOCATE ID_CURSOR_MD;
		SET @DATACORRENTE = DATEADD(DAY, 1, @DATACORRENTE);
	END


GO

GO
/****** Object:  StoredProcedure [dbo].[sp_Rel_KardexPLU]    Script Date: 07/08/2025 16:20:15 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

ALTER PROCEDURE [dbo].[sp_Rel_KardexPLU]
	@FILIAL	VARCHAR(20),
	@PLU VARCHAR(17),
	@DataDe AS DATETIME,
	@DataAte AS DATETIME
AS
DECLARE @Qtde AS DECIMAL(12,2)

SET @DataAte = @DataAte + CONVERT(DATETIME, '23:59:59')

--vARIAVEL QUE VAI RECEBER A DATA PARA ANALISE
DECLARE @MINDATA AS DATETIME
SELECT @MINDATA = MIN(DATA) FROM MERCADORIA_ESTOQUE_DIA WHERE PLU = @PLU

IF RTRIM(LTRIM(@PLU)) = ''
	RETURN
IF NOT EXISTS(SELECT * FROM Mercadoria INNER JOIN Tipo ON Mercadoria.Tipo = Tipo.Tipo WHERE Mercadoria.PLU = @PLU AND ISNULL(Tipo.Estoque, 0) = 1)
	BEGIN
		SELECT 'PRODUTO NÃO CONTROLA ESTOQUE' AS DESCRICAO;
		RETURN;
	END
--SE A DATEDE É MENOR QUE MIN DATA -1, DATADE SERA AJUSTA PARA MINDATA + 1
IF DATEADD(DAY, -1, @DataDe) <= @MINDATA
	SET @DataDe = DATEADD(DAY, 1, @MINDATA)

--PRINT @DATADE

SET @Qtde = 0;

SELECT TOP 1 @Qtde = ISNULL(Mercadoria_Estoque_Dia.Saldo, 0) 
FROM Mercadoria_Estoque_Dia WITH (INDEX=PK_Mercadoria_Estoque_Dia)
WHERE Filial = 'MATRIZ' AND Mercadoria_Estoque_Dia.Data <= DATEADD(DAY, -1, @DataDe) AND PLU = @PLU 
ORDER BY Mercadoria_Estoque_Dia.Data DESC


--IF NOT EXISTS(select ii.plu from inventario i inner join Inventario_itens ii on i.codigo_inventario = ii.Codigo_inventario
--and i.Codigo_inventario = '204' WHERE II.PLU = @PLU)
--	RETURN;


--sp_Rel_KardexPLU '6862', '2025-07-01', '2025-07-21'

BEGIN	
	SELECT PLU, fator_Estoque_Vinculado, Descricao INTO #LIXO FROM MERCADORIA WHERE PLU_Vinculado = @PLU

	CREATE TABLE #Movimentacao (id INT IDENTITY(1, 1), DataHora Datetime, Descricao VARCHAR(250), Qtde Decimal(12,3), Saldo Decimal(12,3));
	
	INSERT INTO #Movimentacao (DataHora, Descricao, Qtde, Saldo) VALUES (@DataDe, 'Saldo inicial', 0, CONVERT(DECIMAL(12,2), @Qtde));

	INSERT INTO #Movimentacao 
	SELECT iv.datahora_encerramento AS DataHora, Descricao = 'OUTRAS MOVIMENTAÇÕES ' + iv.Descricao_inventario + ' ' + IV.Codigo_inventario + 
	CASE WHEN TM.Saida = 2 THEN ' CONTADO ' + CONVERT(VARCHAR, II.Contada, 0) ELSE '' END, case when tm.Saida = 1 then ii.Contada * -1 
	when tm.Saida = 0 then tm.Saida
	when tm.Saida = 2 then ii.Contada - ii.Saldo_atual end, 0
	FROM Inventario iv inner join Inventario_itens ii 
	on iv.Codigo_inventario = ii.Codigo_inventario 	and iv.status = 'ENCERRADO' 
	INNER JOIN Tipo_movimentacao TM ON IV.tipoMovimentacao = TM.Movimentacao
	WHERE iv.DataHora_Encerramento BETWEEN @DataDe AND @DataAte AND ii.PLU = @PLU

	INSERT INTO #Movimentacao 
	SELECT ISNULL(NF.DATAHORA_LANCAMENTO, (NF.DATA + CONVERT(DATETIME, '00:00:01'))), 'Entrada ' + n.Descricao + ' ' + nf.Cliente_Fornecedor + ' ' + NF.Codigo, i.Qtde * i.Embalagem, 0
	from nf inner join nf_item i on nf.Filial = i.Filial and nf.Cliente_Fornecedor = i.Cliente_Fornecedor and nf.codigo = i.codigo
	inner join Natureza_Operacao n on nf.codigo_operacao = n.Codigo_operacao 
	where nf.Tipo_NF = 2 	and i.PLU = @plu
	and nf.data  BETWEEN @DataDe AND @DataAte	and ISNULL(nf.nf_canc, 0) < 1
	and n.Baixa_estoque  = 1

	INSERT INTO #Movimentacao
	select ISNULL(NF.DATAHORA_LANCAMENTO, NF.DATA), 'Saída ' + n.Descricao + ' ' + nf.Cliente_Fornecedor + ' ' + NF.Codigo, i.Qtde * i.Embalagem, 0
	from nf inner join nf_item i on nf.Filial = i.Filial and nf.Cliente_Fornecedor = i.Cliente_Fornecedor and nf.codigo = i.codigo
	inner join Natureza_Operacao n on nf.codigo_operacao = n.Codigo_operacao 
	where nf.Tipo_NF = 1 and i.PLU = @plu 	and nf.data  BETWEEN @DataDe AND @DataAte
	and ISNULL(nf.nf_canc, 0) < 1 	and n.Baixa_estoque  = 1 

	INSERT INTO #Movimentacao
	select S.DATA_MOVIMENTO + CONVERT(DATETIME, S.Hora_venda), 'Venda Cupom ' + s.Documento,  s.qtde * -1, 0
	from Saida_estoque s with (index=ix_Saida_estoque)
	where s.Filial = 'MATRIZ' AND S.DATA_MOVIMENTO + CONVERT(DATETIME, S.Hora_venda) BETWEEN @DataDe AND @DataAte
	and s.PLU = @plu and s.data_cancelamento is null

	INSERT INTO #Movimentacao
	SELECT A.Data, 'Venda Cupom RELACIONADO PLU:' + a.PLU_Origem, a.Qtde * -1, 0
	FROM Mercadoria_Movimentacao_Relacionada A
	WHERE A.Data BETWEEN @DataDe AND @DataAte
	AND A.PLU = @PLU;

	/*
	SELECT A.DATA_MOVIMENTO + CONVERT(DATETIME, A.Hora_venda), 'Venda Cupom RELACIONADO PLU: ' + A.PLU + ' ' + A.Documento + ' ' + M.Descricao,  (A.qtde * M.fator_Estoque_Vinculado) * -1, 0
	FROM (SELECT S.DATA_MOVIMENTO, S.HORA_vENDA, S.PLU, S.QTDE , S.Documento, S.id_Chave
	from Saida_estoque s with (index=ix_Saida_estoque)
	where s.Filial = 'MATRIZ' AND 
	 ( s.Data_movimento + CONVERT(DATETIME, S.Hora_venda))  BETWEEN @DataDe AND @DataAte
	and s.data_cancelamento is null
	AND S.PLU IN(SELECT #LIXO.PLU FROM #LIXO)) AS A
	INNER JOIN #LIXO M ON A.PLU = M.PLU;
	*/

	WITH CTE_Saldos AS (
		SELECT 
			ID,
			SaldoAtual = SUM(qtde + Saldo) OVER (ORDER BY Datahora, ID)
		FROM #Movimentacao
	)
	UPDATE M
	SET M.Saldo = C.SaldoAtual
	FROM #Movimentacao M
	JOIN CTE_Saldos C ON M.ID = C.ID;


	SELECT DataHora, Descricao, Qtde, Saldo FROM #Movimentacao ORDER BY DataHora ASC

END
